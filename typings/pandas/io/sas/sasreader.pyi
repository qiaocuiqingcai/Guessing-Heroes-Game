"""
This type stub file was generated by pyright.
"""

from abc import ABC, abstractmethod
from typing import TYPE_CHECKING, overload
from pandas.util._decorators import doc
from pandas.core.shared_docs import _shared_docs
from collections.abc import Hashable
from types import TracebackType
from pandas._typing import CompressionOptions, FilePath, ReadBuffer, Self
from pandas import DataFrame

"""
Read SAS sas7bdat or xport files.
"""
if TYPE_CHECKING:
    ...
class ReaderBase(ABC):
    """
    Protocol for XportReader and SAS7BDATReader classes.
    """
    @abstractmethod
    def read(self, nrows: int | None = ...) -> DataFrame:
        ...
    
    @abstractmethod
    def close(self) -> None:
        ...
    
    def __enter__(self) -> Self:
        ...
    
    def __exit__(self, exc_type: type[BaseException] | None, exc_value: BaseException | None, traceback: TracebackType | None) -> None:
        ...
    


@overload
def read_sas(filepath_or_buffer: FilePath | ReadBuffer[bytes], *, format: str | None = ..., index: Hashable | None = ..., encoding: str | None = ..., chunksize: int = ..., iterator: bool = ..., compression: CompressionOptions = ...) -> ReaderBase:
    ...

@overload
def read_sas(filepath_or_buffer: FilePath | ReadBuffer[bytes], *, format: str | None = ..., index: Hashable | None = ..., encoding: str | None = ..., chunksize: None = ..., iterator: bool = ..., compression: CompressionOptions = ...) -> DataFrame | ReaderBase:
    ...

@doc(decompression_options=_shared_docs["decompression_options"] % "filepath_or_buffer")
def read_sas(filepath_or_buffer: FilePath | ReadBuffer[bytes], *, format: str | None = ..., index: Hashable | None = ..., encoding: str | None = ..., chunksize: int | None = ..., iterator: bool = ..., compression: CompressionOptions = ...) -> DataFrame | ReaderBase:
    """
    Read SAS files stored as either XPORT or SAS7BDAT format files.

    Parameters
    ----------
    filepath_or_buffer : str, path object, or file-like object
        String, path object (implementing ``os.PathLike[str]``), or file-like
        object implementing a binary ``read()`` function. The string could be a URL.
        Valid URL schemes include http, ftp, s3, and file. For file URLs, a host is
        expected. A local file could be:
        ``file://localhost/path/to/table.sas7bdat``.
    format : str {{'xport', 'sas7bdat'}} or None
        If None, file format is inferred from file extension. If 'xport' or
        'sas7bdat', uses the corresponding format.
    index : identifier of index column, defaults to None
        Identifier of column that should be used as index of the DataFrame.
    encoding : str, default is None
        Encoding for text data.  If None, text data are stored as raw bytes.
    chunksize : int
        Read file `chunksize` lines at a time, returns iterator.
    iterator : bool, defaults to False
        If True, returns an iterator for reading the file incrementally.
    {decompression_options}

    Returns
    -------
    DataFrame if iterator=False and chunksize=None, else SAS7BDATReader
    or XportReader

    Examples
    --------
    >>> df = pd.read_sas("sas_data.sas7bdat")  # doctest: +SKIP
    """
    ...

