"""
This type stub file was generated by pyright.
"""

import typing
import pandas as pd
from pandas._typing import DtypeObj

"""
Utility functions and objects for implementing the interchange API.
"""
if typing.TYPE_CHECKING:
    ...
PYARROW_CTYPES = ...
class ArrowCTypes:
    """
    Enum for Apache Arrow C type format strings.

    The Arrow C data interface:
    https://arrow.apache.org/docs/format/CDataInterface.html#data-type-description-format-strings
    """
    NULL = ...
    BOOL = ...
    INT8 = ...
    UINT8 = ...
    INT16 = ...
    UINT16 = ...
    INT32 = ...
    UINT32 = ...
    INT64 = ...
    UINT64 = ...
    FLOAT16 = ...
    FLOAT32 = ...
    FLOAT64 = ...
    STRING = ...
    LARGE_STRING = ...
    DATE32 = ...
    DATE64 = ...
    TIMESTAMP = ...
    TIME = ...


class Endianness:
    """Enum indicating the byte-order of a data-type."""
    LITTLE = ...
    BIG = ...
    NATIVE = ...
    NA = ...


def dtype_to_arrow_c_fmt(dtype: DtypeObj) -> str:
    """
    Represent pandas `dtype` as a format string in Apache Arrow C notation.

    Parameters
    ----------
    dtype : np.dtype
        Datatype of pandas DataFrame to represent.

    Returns
    -------
    str
        Format string in Apache Arrow C notation of the given `dtype`.
    """
    ...

def maybe_rechunk(series: pd.Series, *, allow_copy: bool) -> pd.Series | None:
    """
    Rechunk a multi-chunk pyarrow array into a single-chunk array, if necessary.

    - Returns `None` if the input series is not backed by a multi-chunk pyarrow array
      (and so doesn't need rechunking)
    - Returns a single-chunk-backed-Series if the input is backed by a multi-chunk
      pyarrow array and `allow_copy` is `True`.
    - Raises a `RuntimeError` if `allow_copy` is `False` and input is a
      based by a multi-chunk pyarrow array.
    """
    ...

