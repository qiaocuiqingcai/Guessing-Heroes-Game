"""
This type stub file was generated by pyright.
"""

import numpy as np
from abc import ABC
from typing import Any, Callable, TYPE_CHECKING
from pandas._libs.tslibs import BaseOffset
from pandas.util._decorators import Appender, cache_readonly, doc
from pandas.core.arrays import DatetimeArray, PeriodArray, TimedeltaArray
from pandas.core.arrays.datetimelike import DatetimeLikeArrayMixin
from pandas.core.indexes.base import Index, _index_shared_docs
from pandas.core.indexes.extension import NDArrayBackedExtensionIndex
from pandas._typing import Axis, Self, npt

"""
Base and utility classes for tseries type pandas objects.
"""
if TYPE_CHECKING:
    ...
_index_doc_kwargs = ...
class DatetimeIndexOpsMixin(NDArrayBackedExtensionIndex, ABC):
    """
    Common ops mixin to support a unified interface datetimelike Index.
    """
    _can_hold_strings = ...
    _data: DatetimeArray | TimedeltaArray | PeriodArray
    @doc(DatetimeLikeArrayMixin.mean)
    def mean(self, *, skipna: bool = ..., axis: int | None = ...):
        ...
    
    @property
    def freq(self) -> BaseOffset | None:
        ...
    
    @freq.setter
    def freq(self, value) -> None:
        ...
    
    @property
    def asi8(self) -> npt.NDArray[np.int64]:
        ...
    
    @property
    @doc(DatetimeLikeArrayMixin.freqstr)
    def freqstr(self) -> str:
        ...
    
    @cache_readonly
    @doc(DatetimeLikeArrayMixin.resolution)
    def resolution(self) -> str:
        ...
    
    @cache_readonly
    def hasnans(self) -> bool:
        ...
    
    def equals(self, other: Any) -> bool:
        """
        Determines if two Index objects contain the same elements.
        """
        ...
    
    @Appender(Index.__contains__.__doc__)
    def __contains__(self, key: Any) -> bool:
        ...
    
    _default_na_rep = ...
    def format(self, name: bool = ..., formatter: Callable | None = ..., na_rep: str = ..., date_format: str | None = ...) -> list[str]:
        """
        Render a string representation of the Index.
        """
        ...
    
    def shift(self, periods: int = ..., freq=...) -> Self:
        """
        Shift index by desired number of time frequency increments.

        This method is for shifting the values of datetime-like indexes
        by a specified time increment a given number of times.

        Parameters
        ----------
        periods : int, default 1
            Number of periods (or increments) to shift by,
            can be positive or negative.
        freq : pandas.DateOffset, pandas.Timedelta or string, optional
            Frequency increment to shift by.
            If None, the index is shifted by its own `freq` attribute.
            Offset aliases are valid strings, e.g., 'D', 'W', 'M' etc.

        Returns
        -------
        pandas.DatetimeIndex
            Shifted index.

        See Also
        --------
        Index.shift : Shift values of Index.
        PeriodIndex.shift : Shift values of PeriodIndex.
        """
        ...
    


class DatetimeTimedeltaMixin(DatetimeIndexOpsMixin, ABC):
    """
    Mixin class for methods shared by DatetimeIndex and TimedeltaIndex,
    but not PeriodIndex
    """
    _data: DatetimeArray | TimedeltaArray
    _comparables = ...
    _attributes = ...
    _is_monotonic_increasing = ...
    _is_monotonic_decreasing = ...
    _is_unique = ...
    @property
    def unit(self) -> str:
        ...
    
    def as_unit(self, unit: str) -> Self:
        """
        Convert to a dtype with the given unit resolution.

        Parameters
        ----------
        unit : {'s', 'ms', 'us', 'ns'}

        Returns
        -------
        same type as self

        Examples
        --------
        For :class:`pandas.DatetimeIndex`:

        >>> idx = pd.DatetimeIndex(['2020-01-02 01:02:03.004005006'])
        >>> idx
        DatetimeIndex(['2020-01-02 01:02:03.004005006'],
                      dtype='datetime64[ns]', freq=None)
        >>> idx.as_unit('s')
        DatetimeIndex(['2020-01-02 01:02:03'], dtype='datetime64[s]', freq=None)

        For :class:`pandas.TimedeltaIndex`:

        >>> tdelta_idx = pd.to_timedelta(['1 day 3 min 2 us 42 ns'])
        >>> tdelta_idx
        TimedeltaIndex(['1 days 00:03:00.000002042'],
                        dtype='timedelta64[ns]', freq=None)
        >>> tdelta_idx.as_unit('s')
        TimedeltaIndex(['1 days 00:03:00'], dtype='timedelta64[s]', freq=None)
        """
        ...
    
    @property
    def values(self) -> np.ndarray:
        ...
    
    @doc(DatetimeIndexOpsMixin.shift)
    def shift(self, periods: int = ..., freq=...) -> Self:
        ...
    
    @cache_readonly
    @doc(DatetimeLikeArrayMixin.inferred_freq)
    def inferred_freq(self) -> str | None:
        ...
    
    @doc(NDArrayBackedExtensionIndex.delete)
    def delete(self, loc) -> Self:
        ...
    
    @doc(NDArrayBackedExtensionIndex.insert)
    def insert(self, loc: int, item): # -> Self | Index:
        ...
    
    @Appender(_index_shared_docs["take"] % _index_doc_kwargs)
    def take(self, indices, axis: Axis = ..., allow_fill: bool = ..., fill_value=..., **kwargs) -> Self:
        ...
    


