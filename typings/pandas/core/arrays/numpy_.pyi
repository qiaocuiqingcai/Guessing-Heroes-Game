"""
This type stub file was generated by pyright.
"""

import numpy as np
from typing import TYPE_CHECKING
from pandas.core.dtypes.dtypes import NumpyEADtype
from pandas.core.arraylike import OpsMixin
from pandas.core.arrays._mixins import NDArrayBackedExtensionArray
from pandas.core.strings.object_array import ObjectStringArrayMixin
from pandas._typing import AxisInt, InterpolateOptions, NpDtype, Scalar, Self, npt
from pandas import Index

if TYPE_CHECKING:
    ...
class NumpyExtensionArray(OpsMixin, NDArrayBackedExtensionArray, ObjectStringArrayMixin):
    """
    A pandas ExtensionArray for NumPy data.

    This is mostly for internal compatibility, and is not especially
    useful on its own.

    Parameters
    ----------
    values : ndarray
        The NumPy ndarray to wrap. Must be 1-dimensional.
    copy : bool, default False
        Whether to copy `values`.

    Attributes
    ----------
    None

    Methods
    -------
    None

    Examples
    --------
    >>> pd.arrays.NumpyExtensionArray(np.array([0, 1, 2, 3]))
    <NumpyExtensionArray>
    [0, 1, 2, 3]
    Length: 4, dtype: int64
    """
    _typ = ...
    __array_priority__ = ...
    _ndarray: np.ndarray
    _dtype: NumpyEADtype
    _internal_fill_value = ...
    def __init__(self, values: np.ndarray | NumpyExtensionArray, copy: bool = ...) -> None:
        ...
    
    @property
    def dtype(self) -> NumpyEADtype:
        ...
    
    def __array__(self, dtype: NpDtype | None = ..., copy: bool | None = ...) -> np.ndarray:
        ...
    
    def __array_ufunc__(self, ufunc: np.ufunc, method: str, *inputs, **kwargs): # -> _NotImplementedType | tuple[Any, ...] | Any | tuple[Self, ...] | Self | None:
        ...
    
    def astype(self, dtype, copy: bool = ...): # -> Self | ExtensionArray | ndarray[_AnyShape, dtype[Any]]:
        ...
    
    def isna(self) -> np.ndarray:
        ...
    
    def interpolate(self, *, method: InterpolateOptions, axis: int, index: Index, limit, limit_direction, limit_area, copy: bool, **kwargs) -> Self:
        """
        See NDFrame.interpolate.__doc__.
        """
        ...
    
    def any(self, *, axis: AxisInt | None = ..., out=..., keepdims: bool = ..., skipna: bool = ...):
        ...
    
    def all(self, *, axis: AxisInt | None = ..., out=..., keepdims: bool = ..., skipna: bool = ...):
        ...
    
    def min(self, *, axis: AxisInt | None = ..., skipna: bool = ..., **kwargs) -> Scalar:
        ...
    
    def max(self, *, axis: AxisInt | None = ..., skipna: bool = ..., **kwargs) -> Scalar:
        ...
    
    def sum(self, *, axis: AxisInt | None = ..., skipna: bool = ..., min_count: int = ..., **kwargs) -> Scalar:
        ...
    
    def prod(self, *, axis: AxisInt | None = ..., skipna: bool = ..., min_count: int = ..., **kwargs) -> Scalar:
        ...
    
    def mean(self, *, axis: AxisInt | None = ..., dtype: NpDtype | None = ..., out=..., keepdims: bool = ..., skipna: bool = ...):
        ...
    
    def median(self, *, axis: AxisInt | None = ..., out=..., overwrite_input: bool = ..., keepdims: bool = ..., skipna: bool = ...):
        ...
    
    def std(self, *, axis: AxisInt | None = ..., dtype: NpDtype | None = ..., out=..., ddof: int = ..., keepdims: bool = ..., skipna: bool = ...):
        ...
    
    def var(self, *, axis: AxisInt | None = ..., dtype: NpDtype | None = ..., out=..., ddof: int = ..., keepdims: bool = ..., skipna: bool = ...):
        ...
    
    def sem(self, *, axis: AxisInt | None = ..., dtype: NpDtype | None = ..., out=..., ddof: int = ..., keepdims: bool = ..., skipna: bool = ...):
        ...
    
    def kurt(self, *, axis: AxisInt | None = ..., dtype: NpDtype | None = ..., out=..., keepdims: bool = ..., skipna: bool = ...):
        ...
    
    def skew(self, *, axis: AxisInt | None = ..., dtype: NpDtype | None = ..., out=..., keepdims: bool = ..., skipna: bool = ...):
        ...
    
    def to_numpy(self, dtype: npt.DTypeLike | None = ..., copy: bool = ..., na_value: object = ...) -> np.ndarray:
        ...
    
    def __invert__(self) -> NumpyExtensionArray:
        ...
    
    def __neg__(self) -> NumpyExtensionArray:
        ...
    
    def __pos__(self) -> NumpyExtensionArray:
        ...
    
    def __abs__(self) -> NumpyExtensionArray:
        ...
    
    _arith_method = ...


