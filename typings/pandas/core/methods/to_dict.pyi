"""
This type stub file was generated by pyright.
"""

from typing import Literal, TYPE_CHECKING, overload
from pandas._typing import MutableMappingT
from pandas import DataFrame

if TYPE_CHECKING:
    ...
@overload
def to_dict(df: DataFrame, orient: Literal["dict", "list", "series", "split", "tight", "index"] = ..., *, into: type[MutableMappingT] | MutableMappingT, index: bool = ...) -> MutableMappingT:
    ...

@overload
def to_dict(df: DataFrame, orient: Literal["records"], *, into: type[MutableMappingT] | MutableMappingT, index: bool = ...) -> list[MutableMappingT]:
    ...

@overload
def to_dict(df: DataFrame, orient: Literal["dict", "list", "series", "split", "tight", "index"] = ..., *, into: type[dict] = ..., index: bool = ...) -> dict:
    ...

@overload
def to_dict(df: DataFrame, orient: Literal["records"], *, into: type[dict] = ..., index: bool = ...) -> list[dict]:
    ...

def to_dict(df: DataFrame, orient: Literal["dict", "list", "series", "split", "tight", "records", "index"] = ..., *, into: type[MutableMappingT] | MutableMappingT = ..., index: bool = ...) -> MutableMappingT | list[MutableMappingT]:
    """
    Convert the DataFrame to a dictionary.

    The type of the key-value pairs can be customized with the parameters
    (see below).

    Parameters
    ----------
    orient : str {'dict', 'list', 'series', 'split', 'tight', 'records', 'index'}
        Determines the type of the values of the dictionary.

        - 'dict' (default) : dict like {column -> {index -> value}}
        - 'list' : dict like {column -> [values]}
        - 'series' : dict like {column -> Series(values)}
        - 'split' : dict like
          {'index' -> [index], 'columns' -> [columns], 'data' -> [values]}
        - 'tight' : dict like
          {'index' -> [index], 'columns' -> [columns], 'data' -> [values],
          'index_names' -> [index.names], 'column_names' -> [column.names]}
        - 'records' : list like
          [{column -> value}, ... , {column -> value}]
        - 'index' : dict like {index -> {column -> value}}

        .. versionadded:: 1.4.0
            'tight' as an allowed value for the ``orient`` argument

    into : class, default dict
        The collections.abc.MutableMapping subclass used for all Mappings
        in the return value.  Can be the actual class or an empty
        instance of the mapping type you want.  If you want a
        collections.defaultdict, you must pass it initialized.

    index : bool, default True
        Whether to include the index item (and index_names item if `orient`
        is 'tight') in the returned dictionary. Can only be ``False``
        when `orient` is 'split' or 'tight'.

        .. versionadded:: 2.0.0

    Returns
    -------
    dict, list or collections.abc.Mapping
        Return a collections.abc.MutableMapping object representing the
        DataFrame. The resulting transformation depends on the `orient` parameter.
    """
    ...

