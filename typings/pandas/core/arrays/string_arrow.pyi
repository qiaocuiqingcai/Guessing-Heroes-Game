"""
This type stub file was generated by pyright.
"""

import numpy as np
from typing import TYPE_CHECKING, Union
from pandas._libs import missing as libmissing
from pandas.compat import pa_version_under10p1
from pandas.core.arrays.arrow import ArrowExtensionArray
from pandas.core.arrays.string_ import BaseStringArray, StringDtype
from pandas.core.strings.object_array import ObjectStringArrayMixin
from pandas._typing import ArrayLike, Self, npt
from pandas import Series

if not pa_version_under10p1:
    ...
if TYPE_CHECKING:
    ...
ArrowStringScalarOrNAT = Union[str, libmissing.NAType]
class ArrowStringArray(ObjectStringArrayMixin, ArrowExtensionArray, BaseStringArray):
    """
    Extension array for string data in a ``pyarrow.ChunkedArray``.

    .. warning::

       ArrowStringArray is considered experimental. The implementation and
       parts of the API may change without warning.

    Parameters
    ----------
    values : pyarrow.Array or pyarrow.ChunkedArray
        The array of data.

    Attributes
    ----------
    None

    Methods
    -------
    None

    See Also
    --------
    :func:`pandas.array`
        The recommended function for creating a ArrowStringArray.
    Series.str
        The string methods are available on Series backed by
        a ArrowStringArray.

    Notes
    -----
    ArrowStringArray returns a BooleanArray for comparison methods.

    Examples
    --------
    >>> pd.array(['This is', 'some text', None, 'data.'], dtype="string[pyarrow]")
    <ArrowStringArray>
    ['This is', 'some text', <NA>, 'data.']
    Length: 4, dtype: string
    """
    _dtype: StringDtype
    _storage = ...
    _na_value: libmissing.NAType | float = ...
    def __init__(self, values) -> None:
        ...
    
    def __len__(self) -> int:
        """
        Length of this array.

        Returns
        -------
        length : int
        """
        ...
    
    @property
    def dtype(self) -> StringDtype:
        """
        An instance of 'string[pyarrow]'.
        """
        ...
    
    def insert(self, loc: int, item) -> ArrowStringArray:
        ...
    
    def isin(self, values: ArrayLike) -> npt.NDArray[np.bool_]:
        ...
    
    def astype(self, dtype, copy: bool = ...): # -> Self | BaseMaskedArray | ndarray[_AnyShape, dtype[Any]] | ExtensionArray:
        ...
    
    _str_isalnum = ...
    _str_isalpha = ...
    _str_isdecimal = ...
    _str_isdigit = ...
    _str_islower = ...
    _str_isnumeric = ...
    _str_isspace = ...
    _str_istitle = ...
    _str_isupper = ...
    _str_map = ...
    _str_startswith = ...
    _str_endswith = ...
    _str_pad = ...
    _str_match = ...
    _str_fullmatch = ...
    _str_lower = ...
    _str_upper = ...
    _str_strip = ...
    _str_lstrip = ...
    _str_rstrip = ...
    _str_removesuffix = ...
    _str_get = ...
    _str_capitalize = ...
    _str_title = ...
    _str_swapcase = ...
    _str_slice_replace = ...
    _str_len = ...
    _str_slice = ...
    def value_counts(self, dropna: bool = ...) -> Series:
        ...
    
    def __pos__(self) -> Self:
        ...
    


class ArrowStringArrayNumpySemantics(ArrowStringArray):
    _na_value = ...


