"""
This type stub file was generated by pyright.
"""

from typing import Any, TYPE_CHECKING
from pandas._libs import lib
from pandas.util._decorators import doc
from pandas.core.api import DataFrame
from pandas.core.shared_docs import _shared_docs
from collections.abc import Hashable, Sequence
from pandas._typing import DtypeBackend, FilePath, ReadBuffer, StorageOptions, WriteBuffer

""" feather-format compat """
if TYPE_CHECKING:
    ...
@doc(storage_options=_shared_docs["storage_options"])
def to_feather(df: DataFrame, path: FilePath | WriteBuffer[bytes], storage_options: StorageOptions | None = ..., **kwargs: Any) -> None:
    """
    Write a DataFrame to the binary Feather format.

    Parameters
    ----------
    df : DataFrame
    path : str, path object, or file-like object
    {storage_options}
    **kwargs :
        Additional keywords passed to `pyarrow.feather.write_feather`.

    """
    ...

@doc(storage_options=_shared_docs["storage_options"])
def read_feather(path: FilePath | ReadBuffer[bytes], columns: Sequence[Hashable] | None = ..., use_threads: bool = ..., storage_options: StorageOptions | None = ..., dtype_backend: DtypeBackend | lib.NoDefault = ...) -> DataFrame:
    """
    Load a feather-format object from the file path.

    Parameters
    ----------
    path : str, path object, or file-like object
        String, path object (implementing ``os.PathLike[str]``), or file-like
        object implementing a binary ``read()`` function. The string could be a URL.
        Valid URL schemes include http, ftp, s3, and file. For file URLs, a host is
        expected. A local file could be: ``file://localhost/path/to/table.feather``.
    columns : sequence, default None
        If not provided, all columns are read.
    use_threads : bool, default True
        Whether to parallelize reading using multiple threads.
    {storage_options}

    dtype_backend : {{'numpy_nullable', 'pyarrow'}}, default 'numpy_nullable'
        Back-end data type applied to the resultant :class:`DataFrame`
        (still experimental). Behaviour is as follows:

        * ``"numpy_nullable"``: returns nullable-dtype-backed :class:`DataFrame`
          (default).
        * ``"pyarrow"``: returns pyarrow-backed nullable :class:`ArrowDtype`
          DataFrame.

        .. versionadded:: 2.0

    Returns
    -------
    type of object stored in file

    Examples
    --------
    >>> df = pd.read_feather("path/to/file.feather")  # doctest: +SKIP
    """
    ...

