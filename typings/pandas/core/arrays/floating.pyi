"""
This type stub file was generated by pyright.
"""

import numpy as np
from typing import ClassVar
from pandas.core.dtypes.base import register_extension_dtype
from pandas.core.arrays.numeric import NumericArray, NumericDtype

class FloatingDtype(NumericDtype):
    """
    An ExtensionDtype to hold a single size of floating dtype.

    These specific implementations are subclasses of the non-public
    FloatingDtype. For example we have Float32Dtype to represent float32.

    The attributes name & type are set when these subclasses are created.
    """
    _default_np_dtype = ...
    _checker = ...
    @classmethod
    def construct_array_type(cls) -> type[FloatingArray]:
        """
        Return the array type associated with this dtype.

        Returns
        -------
        type
        """
        ...
    


class FloatingArray(NumericArray):
    """
    Array of floating (optional missing) values.

    .. warning::

       FloatingArray is currently experimental, and its API or internal
       implementation may change without warning. Especially the behaviour
       regarding NaN (distinct from NA missing values) is subject to change.

    We represent a FloatingArray with 2 numpy arrays:

    - data: contains a numpy float array of the appropriate dtype
    - mask: a boolean array holding a mask on the data, True is missing

    To construct an FloatingArray from generic array-like input, use
    :func:`pandas.array` with one of the float dtypes (see examples).

    See :ref:`integer_na` for more.

    Parameters
    ----------
    values : numpy.ndarray
        A 1-d float-dtype array.
    mask : numpy.ndarray
        A 1-d boolean-dtype array indicating missing values.
    copy : bool, default False
        Whether to copy the `values` and `mask`.

    Attributes
    ----------
    None

    Methods
    -------
    None

    Returns
    -------
    FloatingArray

    Examples
    --------
    Create an FloatingArray with :func:`pandas.array`:

    >>> pd.array([0.1, None, 0.3], dtype=pd.Float32Dtype())
    <FloatingArray>
    [0.1, <NA>, 0.3]
    Length: 3, dtype: Float32

    String aliases for the dtypes are also available. They are capitalized.

    >>> pd.array([0.1, None, 0.3], dtype="Float32")
    <FloatingArray>
    [0.1, <NA>, 0.3]
    Length: 3, dtype: Float32
    """
    _dtype_cls = FloatingDtype
    _internal_fill_value = ...
    _truthy_value = ...
    _falsey_value = ...


_dtype_docstring = ...
@register_extension_dtype
class Float32Dtype(FloatingDtype):
    type = ...
    name: ClassVar[str] = ...
    __doc__ = ...


@register_extension_dtype
class Float64Dtype(FloatingDtype):
    type = ...
    name: ClassVar[str] = ...
    __doc__ = ...


NUMPY_FLOAT_TO_DTYPE: dict[np.dtype, FloatingDtype] = ...
