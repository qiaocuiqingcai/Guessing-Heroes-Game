"""
This type stub file was generated by pyright.
"""

import operator
import os
import warnings
import numpy as np
import pandas as pd
import pyarrow as pa
from decimal import Decimal
from sys import byteorder
from typing import Callable, ContextManager, TYPE_CHECKING
from pandas._config import using_string_dtype
from pandas._config.localization import can_set_locale, get_locales, set_locale
from pandas.compat import pa_version_under10p1
from pandas import ArrowDtype, DataFrame, Index, MultiIndex, RangeIndex, Series
from pandas._testing._io import round_trip_localpath, round_trip_pathlib, round_trip_pickle, write_to_compressed
from pandas._testing._warnings import assert_produces_warning, maybe_produces_warning
from pandas._testing.asserters import assert_almost_equal, assert_attr_equal, assert_categorical_equal, assert_class_equal, assert_contains_all, assert_copy, assert_datetime_array_equal, assert_dict_equal, assert_equal, assert_extension_array_equal, assert_frame_equal, assert_index_equal, assert_indexing_slices_equivalent, assert_interval_array_equal, assert_is_sorted, assert_is_valid_plot_return_object, assert_metadata_equivalent, assert_numpy_array_equal, assert_period_array_equal, assert_series_equal, assert_sp_array_equal, assert_timedelta_array_equal, raise_assert_detail
from pandas._testing.compat import get_dtype, get_obj
from pandas._testing.contexts import assert_cow_warning, decompress_file, ensure_clean, raises_chained_assignment_error, set_timezone, use_numexpr, with_csv_dialect
from pandas.core.arrays import ArrowExtensionArray, BaseMaskedArray, NumpyExtensionArray
from pandas.core.arrays._mixins import NDArrayBackedExtensionArray
from pandas.core.construction import extract_array
from pandas._typing import Dtype, NpDtype

if TYPE_CHECKING:
    ...
UNSIGNED_INT_NUMPY_DTYPES: list[NpDtype] = ...
UNSIGNED_INT_EA_DTYPES: list[Dtype] = ...
SIGNED_INT_NUMPY_DTYPES: list[NpDtype] = ...
SIGNED_INT_EA_DTYPES: list[Dtype] = ...
ALL_INT_NUMPY_DTYPES = ...
ALL_INT_EA_DTYPES = ...
ALL_INT_DTYPES: list[Dtype] = ...
FLOAT_NUMPY_DTYPES: list[NpDtype] = ...
FLOAT_EA_DTYPES: list[Dtype] = ...
ALL_FLOAT_DTYPES: list[Dtype] = ...
COMPLEX_DTYPES: list[Dtype] = ...
if using_string_dtype():
    STRING_DTYPES: list[Dtype] = ...
else:
    STRING_DTYPES: list[Dtype] = ...
COMPLEX_FLOAT_DTYPES: list[Dtype] = ...
DATETIME64_DTYPES: list[Dtype] = ...
TIMEDELTA64_DTYPES: list[Dtype] = ...
BOOL_DTYPES: list[Dtype] = ...
BYTES_DTYPES: list[Dtype] = ...
OBJECT_DTYPES: list[Dtype] = ...
ALL_REAL_NUMPY_DTYPES = ...
ALL_REAL_EXTENSION_DTYPES = ...
ALL_REAL_DTYPES: list[Dtype] = ...
ALL_NUMERIC_DTYPES: list[Dtype] = ...
ALL_NUMPY_DTYPES = ...
NARROW_NP_DTYPES = ...
PYTHON_DATA_TYPES = ...
ENDIAN = ...
NULL_OBJECTS = ...
NP_NAT_OBJECTS = ...
if not pa_version_under10p1:
    UNSIGNED_INT_PYARROW_DTYPES = ...
    SIGNED_INT_PYARROW_DTYPES = ...
    ALL_INT_PYARROW_DTYPES = ...
    ALL_INT_PYARROW_DTYPES_STR_REPR = ...
    FLOAT_PYARROW_DTYPES = ...
    FLOAT_PYARROW_DTYPES_STR_REPR = ...
    DECIMAL_PYARROW_DTYPES = ...
    STRING_PYARROW_DTYPES = ...
    BINARY_PYARROW_DTYPES = ...
    TIME_PYARROW_DTYPES = ...
    DATE_PYARROW_DTYPES = ...
    DATETIME_PYARROW_DTYPES = ...
    TIMEDELTA_PYARROW_DTYPES = ...
    BOOL_PYARROW_DTYPES = ...
    ALL_PYARROW_DTYPES = ...
    ALL_REAL_PYARROW_DTYPES_STR_REPR = ...
else:
    FLOAT_PYARROW_DTYPES_STR_REPR = ...
    ALL_INT_PYARROW_DTYPES_STR_REPR = ...
    ALL_PYARROW_DTYPES = ...
    ALL_REAL_PYARROW_DTYPES_STR_REPR = ...
ALL_REAL_NULLABLE_DTYPES = ...
arithmetic_dunder_methods = ...
comparison_dunder_methods = ...
def box_expected(expected, box_cls, transpose: bool = ...): # -> ArrayLike | NumpyExtensionArray | Index | Series | DataFrame | NDArray[Any]:
    """
    Helper function to wrap the expected output of a test in a given box_class.

    Parameters
    ----------
    expected : np.ndarray, Index, Series
    box_cls : {Index, Series, DataFrame}

    Returns
    -------
    subclass of box_cls
    """
    ...

def to_array(obj): # -> ArrayLike | NDArray[Any]:
    """
    Similar to pd.array, but does not cast numpy dtypes to nullable dtypes.
    """
    ...

class SubclassedSeries(Series):
    _metadata = ...


class SubclassedDataFrame(DataFrame):
    _metadata = ...


def convert_rows_list_to_csv_str(rows_list: list[str]) -> str:
    """
    Convert list of CSV rows to single CSV-formatted string for current OS.

    This method is used for creating expected value of to_csv() method.

    Parameters
    ----------
    rows_list : List[str]
        Each element represents the row of csv.

    Returns
    -------
    str
        Expected output of to_csv() in current OS.
    """
    ...

def external_error_raised(expected_exception: type[Exception]) -> ContextManager:
    """
    Helper function to mark pytest.raises that have an external error message.

    Parameters
    ----------
    expected_exception : Exception
        Expected error to raise.

    Returns
    -------
    Callable
        Regular `pytest.raises` function with `match` equal to `None`.
    """
    ...

cython_table = ...
def get_cython_table_params(ndframe, func_names_and_expected): # -> list[Any]:
    """
    Combine frame, functions from com._cython_table
    keys and expected result.

    Parameters
    ----------
    ndframe : DataFrame or Series
    func_names_and_expected : Sequence of two items
        The first item is a name of a NDFrame method ('sum', 'prod') etc.
        The second item is the expected return value.

    Returns
    -------
    list
        List of three items (DataFrame, function, expected result)
    """
    ...

def get_op_from_name(op_name: str) -> Callable:
    """
    The operator function for a given op name.

    Parameters
    ----------
    op_name : str
        The op name, in form of "add" or "__add__".

    Returns
    -------
    function
        A function performing the operation.
    """
    ...

def getitem(x):
    ...

def setitem(x):
    ...

def loc(x):
    ...

def iloc(x):
    ...

def at(x):
    ...

def iat(x):
    ...

_UNITS = ...
def get_finest_unit(left: str, right: str): # -> str:
    """
    Find the higher of two datetime64 units.
    """
    ...

def shares_memory(left, right) -> bool:
    """
    Pandas-compat for np.shares_memory.
    """
    ...

__all__ = ["ALL_INT_EA_DTYPES", "ALL_INT_NUMPY_DTYPES", "ALL_NUMPY_DTYPES", "ALL_REAL_NUMPY_DTYPES", "assert_almost_equal", "assert_attr_equal", "assert_categorical_equal", "assert_class_equal", "assert_contains_all", "assert_copy", "assert_datetime_array_equal", "assert_dict_equal", "assert_equal", "assert_extension_array_equal", "assert_frame_equal", "assert_index_equal", "assert_indexing_slices_equivalent", "assert_interval_array_equal", "assert_is_sorted", "assert_is_valid_plot_return_object", "assert_metadata_equivalent", "assert_numpy_array_equal", "assert_period_array_equal", "assert_produces_warning", "assert_series_equal", "assert_sp_array_equal", "assert_timedelta_array_equal", "assert_cow_warning", "at", "BOOL_DTYPES", "box_expected", "BYTES_DTYPES", "can_set_locale", "COMPLEX_DTYPES", "convert_rows_list_to_csv_str", "DATETIME64_DTYPES", "decompress_file", "ENDIAN", "ensure_clean", "external_error_raised", "FLOAT_EA_DTYPES", "FLOAT_NUMPY_DTYPES", "get_cython_table_params", "get_dtype", "getitem", "get_locales", "get_finest_unit", "get_obj", "get_op_from_name", "iat", "iloc", "loc", "maybe_produces_warning", "NARROW_NP_DTYPES", "NP_NAT_OBJECTS", "NULL_OBJECTS", "OBJECT_DTYPES", "raise_assert_detail", "raises_chained_assignment_error", "round_trip_localpath", "round_trip_pathlib", "round_trip_pickle", "setitem", "set_locale", "set_timezone", "shares_memory", "SIGNED_INT_EA_DTYPES", "SIGNED_INT_NUMPY_DTYPES", "STRING_DTYPES", "SubclassedDataFrame", "SubclassedSeries", "TIMEDELTA64_DTYPES", "to_array", "UNSIGNED_INT_EA_DTYPES", "UNSIGNED_INT_NUMPY_DTYPES", "use_numexpr", "with_csv_dialect", "write_to_compressed"]
