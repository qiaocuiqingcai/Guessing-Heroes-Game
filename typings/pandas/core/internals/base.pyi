"""
This type stub file was generated by pyright.
"""

import numpy as np
from typing import Any, Literal, TYPE_CHECKING, final
from pandas.core.base import PandasObject
from pandas.core.indexes.api import Index
from pandas._typing import ArrayLike, AxisInt, DtypeObj, Self, Shape

"""
Base class for the internal managers. Both BlockManager and ArrayManager
inherit from this class.
"""
if TYPE_CHECKING:
    ...
class _AlreadyWarned:
    def __init__(self) -> None:
        ...
    


class DataManager(PandasObject):
    axes: list[Index]
    @property
    def items(self) -> Index:
        ...
    
    @final
    def __len__(self) -> int:
        ...
    
    @property
    def ndim(self) -> int:
        ...
    
    @property
    def shape(self) -> Shape:
        ...
    
    def reindex_indexer(self, new_axis, indexer, axis: AxisInt, fill_value=..., allow_dups: bool = ..., copy: bool = ..., only_slice: bool = ...) -> Self:
        ...
    
    @final
    def reindex_axis(self, new_index: Index, axis: AxisInt, fill_value=..., only_slice: bool = ...) -> Self:
        """
        Conform data manager to new index.
        """
        ...
    
    @final
    def equals(self, other: object) -> bool:
        """
        Implementation for DataFrame.equals
        """
        ...
    
    def apply(self, f, align_keys: list[str] | None = ..., **kwargs) -> Self:
        ...
    
    def apply_with_block(self, f, align_keys: list[str] | None = ..., **kwargs) -> Self:
        ...
    
    @final
    def isna(self, func) -> Self:
        ...
    
    @final
    def fillna(self, value, limit: int | None, inplace: bool, downcast) -> Self:
        ...
    
    @final
    def where(self, other, cond, align: bool) -> Self:
        ...
    
    @final
    def putmask(self, mask, new, align: bool = ..., warn: bool = ...) -> Self:
        ...
    
    @final
    def round(self, decimals: int, using_cow: bool = ...) -> Self:
        ...
    
    @final
    def replace(self, to_replace, value, inplace: bool) -> Self:
        ...
    
    @final
    def replace_regex(self, **kwargs) -> Self:
        ...
    
    @final
    def replace_list(self, src_list: list[Any], dest_list: list[Any], inplace: bool = ..., regex: bool = ...) -> Self:
        """do a list replace"""
        ...
    
    def interpolate(self, inplace: bool, **kwargs) -> Self:
        ...
    
    def pad_or_backfill(self, inplace: bool, **kwargs) -> Self:
        ...
    
    def shift(self, periods: int, fill_value) -> Self:
        ...
    
    def is_consolidated(self) -> bool:
        ...
    
    def consolidate(self) -> Self:
        ...
    


class SingleDataManager(DataManager):
    @property
    def ndim(self) -> Literal[1]:
        ...
    
    @final
    @property
    def array(self) -> ArrayLike:
        """
        Quick access to the backing array of the Block or SingleArrayManager.
        """
        ...
    
    def setitem_inplace(self, indexer, value, warn: bool = ...) -> None:
        """
        Set values with indexer.

        For Single[Block/Array]Manager, this backs s[indexer] = value

        This is an inplace version of `setitem()`, mutating the manager/values
        in place, not returning a new Manager (and Block), and thus never changing
        the dtype.
        """
        ...
    
    def grouped_reduce(self, func):
        ...
    
    @classmethod
    def from_array(cls, arr: ArrayLike, index: Index):
        ...
    


def interleaved_dtype(dtypes: list[DtypeObj]) -> DtypeObj | None:
    """
    Find the common dtype for `blocks`.

    Parameters
    ----------
    blocks : List[DtypeObj]

    Returns
    -------
    dtype : np.dtype, ExtensionDtype, or None
        None is returned when `blocks` is empty.
    """
    ...

def ensure_np_dtype(dtype: DtypeObj) -> np.dtype:
    ...

